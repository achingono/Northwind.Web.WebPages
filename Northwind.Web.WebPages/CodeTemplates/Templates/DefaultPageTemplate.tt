<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Reflection" #>
<#+
// <copyright file="DefaultPageTemplate.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

public class DefaultPageTemplate : BaseTemplate
{
	public override string TransformText()
	{
		var controllerName = this.ControllerType.Name.Replace("Controller", "");
		var singularName = ToSingularName(controllerName);
#>
@{  
    Page.Title = "Northwind: <#= controllerName #>";
    Page.ApiController = "<#= controllerName #>";
	Page.Count = Data.<#= controllerName #>.Count();
}

<div class="row">
	@RenderPage("~/Shared/_Pagination.cshtml")
    <h1><#= controllerName #></h1>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
			<#+ 
				var method = this.ControllerType.GetMethods()
												.Where(m => m.Name == "Get"
														 && m.ReturnType.IsGenericType)
												.FirstOrDefault();

				if (method == null) {
					return string.Empty;
				}
				var returnType = method.ReturnType;
				var modelType = returnType.GetGenericArguments().FirstOrDefault();
				var modelProperties = modelType.GetProperties().Where(p => p.PropertyType != typeof(System.Collections.IEnumerable));
				var keyPropertyName = modelProperties.First().Name;

				foreach(var property in modelProperties)
				{
			#>
                <th><#= ToFriendlyName(property.Name) #></th>
			<#+ 
				}
			#>
                <th></th>
            </tr>
        </thead>
        <tbody data-bind="foreach: @Page.ApiController">
            <tr>
			<#+ 
				foreach(var property in modelProperties)
				{
					if (property.PropertyType == typeof(decimal) || property.PropertyType == typeof(decimal?)) 
					{
			#>
                <td data-bind="text: '$' + <#= property.Name #>().toFixed(2)" class="tr"></td>
			<#+ 
					}
					else 
					{
			#>
                <td data-bind="text: <#= property.Name #>"></td>
			<#+ 
					}
				}
			#>
                <td class="nowrap">
                    <a class="btn" 
						title="View <#= singularName #>"
                        data-template="View<#= singularName #>" 
                        data-bind="attr: { 'data-id': Id(), href: '#!/' + Id() }"
                        data-toggle="modal"
                        data-target="#modal"><i class="icon-eye-open"></i></a>
                    <a class="btn btn-primary" 
						title="Edit <#= singularName #>"
                        data-template="Edit<#= singularName #>" 
                        data-bind="attr: { 'data-id': Id(), href: '#!/Edit/' + Id() }"
                        data-toggle="modal"
                        data-target="#modal"><i class="icon-edit icon-white"></i></a>
                    <a class="btn btn-danger" 
						title="Delete <#= singularName #>"
                        data-template="Delete<#= singularName #>" 
                        data-bind="attr: { 'data-id': Id(), href: '#!/Delete/' + Id() }"
                        data-toggle="modal"
                        data-target="#modal"><i class="icon-trash icon-white"></i></a>
                </td>
            </tr>
        </tbody>
    </table>
</div>

@section scripts {
<script id="View<#= singularName #>" type="text/html">
    @RenderPage("_View.cshtml")
</script>
<script id="Edit<#= singularName #>" type="text/html">
    @RenderPage("_Edit.cshtml")
</script>
<script id="Delete<#= singularName #>" type="text/html">
<div class="alert  alert-block alert-danger">
  <strong>Warning!</strong> You are about to delete <#= singularName #>: <strong data-bind="text: <#= keyPropertyName #>"></strong>. Are you sure?
</div>    
<form method="delete" class="form-horizontal" data-bind="attr: { action: '@Url.ApiUrl("<#= controllerName #>")' + '/' + <#= keyPropertyName #>() }">
</form>
</script>
}
<#+
        return this.GenerationEnvironment.ToString();
	}
}
#>
